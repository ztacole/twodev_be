// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  password   String
  role_id    Int

  role       Role     @relation(fields: [role_id], references: [id])
  assessee   Assessee?
  assessor   Assessor?
  admin      Admin?
}

model Role {
  id    Int     @id @default(autoincrement())
  name  String

  users User[]
}

model Assessee {
  id              Int      @id @default(autoincrement())
  user_id         Int      @unique
  full_name       String
  identity_number String
  birth_date      DateTime
  birth_location  String
  gender          Gender
  nationality     String
  phone_no        String
  house_phone_no  String?
  office_phone_no String?
  address         String
  postal_code     String?
  educational_qualifications String

  user            User     @relation(fields: [user_id], references: [id])
  jobs            Assessee_Job[]
  answers         Assessee_Answer[]
  results         Result[]
}

model Assessor {
  id          Int       @id @default(autoincrement())
  user_id     Int     @unique      
  full_name  String 
  scheme_id   Int
  address     String
  phone_no    String
  birth_date  DateTime

  user        User      @relation(fields: [user_id], references: [id])
  scheme      Schemes   @relation(fields: [scheme_id], references: [id])
  assessment_details Assessment_Details[]
  details     Assessor_Details?
  result        Result_Docs[]
}

model Admin {
  id         Int      @id @default(autoincrement())
  user_id    Int      @unique
  full_name  String
  address    String
  phone_no   String
  birth_date DateTime

  user       User     @relation(fields: [user_id], references: [id])
}

model Schemes {
  id          Int               @id @default(autoincrement())
  code        String
  name        String

  occupations Occupation[]
  assessors   Assessor[]
}

model Occupation {
  id        Int     @id @default(autoincrement())
  scheme_id Int
  name      String

  scheme    Schemes @relation(fields: [scheme_id], references: [id])

  assessments Assessment[]
}

model Unit_Competency {
  id          Int       @id @default(autoincrement())
  assessment_id Int
  unit_code   String
  title       String

  elements    Element[]
  assessment  Assessment @relation(fields: [assessment_id], references: [id])
}

model Element {
  id                Int              @id @default(autoincrement())
  unit_competency_id Int
  title             String

  unit_competency   Unit_Competency @relation(fields: [unit_competency_id], references: [id])
  details           Element_Details[]
  result_details    Result_Details[]
}

model Element_Details {
  id         Int     @id @default(autoincrement())
  element_id Int
  description String

  element    Element @relation(fields: [element_id], references: [id])
}

model Assessment {
  id           Int         @id @default(autoincrement())
  occupation_id Int
  code         String

  occupation  Occupation  @relation(fields: [occupation_id], references: [id])

  assessment_schedule Assessment_Schedule[]
  assessment_details  Assessment_Details[]
  unit_competencies   Unit_Competency[]
  questions           Assessment_Question[]
  results             Result[]
}

model Assessment_Schedule {
  id            Int        @id @default(autoincrement())
  assessment_id Int
  status       AssessmentStatus
  start_date   DateTime
  end_date     DateTime

  assessment   Assessment  @relation(fields: [assessment_id], references: [id])
}

model Assessment_Details {
  id            Int        @id @default(autoincrement())
  assessment_id Int
  assessor_id   Int
  location      String

  assessment    Assessment @relation(fields: [assessment_id], references: [id])
  assessor    Assessor   @relation(fields: [assessor_id], references: [id])
}

model Assessment_Question {
  id             Int          @id @default(autoincrement())
  assessment_id  Int
  type           QuestionType
  question       String

  assessment     Assessment   @relation(fields: [assessment_id], references: [id])
  pg_details     QuestionPG_Details[]
  answers        Assessee_Answer[]
}

model QuestionPG_Details {
  id         Int  @id @default(autoincrement())
  question_id Int
  option      String
  isanswer    Boolean

  question   Assessment_Question @relation(fields: [question_id], references: [id])
}

model Assessee_Answer {
  id           Int       @id @default(autoincrement())
  question_id  Int
  assessee_id  Int
  answer       String

  question     Assessment_Question @relation(fields: [question_id], references: [id])
  assessee     Assessee            @relation(fields: [assessee_id], references: [id])
}

model Result {
  id            Int       @id @default(autoincrement())
  assessment_id Int
  assessee_id   Int
  approve       Boolean
  created_at    DateTime @default(now())

  assessment    Assessment @relation(fields: [assessment_id], references: [id])
  assessee      Assessee   @relation(fields: [assessee_id], references: [id])
  details       Result_Details[]
  result        Result_Docs[]
}

model Result_Docs {
  id         Int       @id @default(autoincrement())
  result_id  Int
  assessor_id Int
  purpose    String
  school_report_card    String
  field_work_practice_certificate    String
  student_card    String
  family_card    String
  id_card    String

  result     Result  @relation(fields: [result_id], references: [id])
  assessor   Assessor @relation(fields: [assessor_id], references: [id])
}

model Result_Details {
  id         Int     @id @default(autoincrement())
  result_id  Int
  element_id Int
  answer     Boolean
  proof      String

  result     Result  @relation(fields: [result_id], references: [id])
  element    Element @relation(fields: [element_id], references: [id])
}

model Assessee_Job {
  id               Int    @id @default(autoincrement())
  assessee_id      Int    @unique
  institution_name String
  address          String
  postal_code      String
  position         String
  phone_no         String
  job_email        String

  assessee         Assessee @relation(fields: [assessee_id], references: [id])
}

model Assessor_Details {
  id             Int     @id @default(autoincrement())
  assessor_id    Int        @unique
  tax_id_number  String
  bank_book_cover String
  certificate     String
  national_id     String

  assessor       Assessor @relation(fields: [assessor_id], references: [id])
}

enum Gender {
  Male
  Female
}

enum AssessmentStatus {
  Planned
  Ongoing
  Completed
}

enum QuestionType {
  PG
  Essay
}